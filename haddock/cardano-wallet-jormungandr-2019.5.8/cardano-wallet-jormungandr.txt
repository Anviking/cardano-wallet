-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Jörmungandr
--   
--   Please see README.md
@package cardano-wallet-jormungandr
@version 2019.5.8


-- | This module contains static configuration parameters. Rather than
--   providing and carrying around a configuration file through the
--   application, we resolve configuration data at runtime using the
--   available environment.
--   
--   This gives us a flexible and portable approach to software
--   configuration, and remove some pain from the development perspective.
--   Prior to starting, the wallet is expected to have a few configuration
--   parameter available. One may rely on a `.env` file to bundle
--   configuration settings together for a given target environment.
module Cardano.Environment.Jormungandr

-- | Available network options.
data Network
Mainnet :: Network
Testnet :: Network

-- | Get the current target <a>Network</a> from the Environment.
--   
--   Throws a runtime exception is the ENV var isn't set or, is invalid.
network :: Network
newtype ProtocolMagic
ProtocolMagic :: Int32 -> ProtocolMagic

-- | Get the <a>ProtocolMagic</a> corresponding to a given <a>Network</a>.
protocolMagic :: Network -> ProtocolMagic
instance GHC.Show.Show Cardano.Environment.Jormungandr.ProtocolMagic
instance GHC.Generics.Generic Cardano.Environment.Jormungandr.ProtocolMagic
instance GHC.Enum.Enum Cardano.Environment.Jormungandr.Network
instance GHC.Classes.Eq Cardano.Environment.Jormungandr.Network
instance GHC.Show.Show Cardano.Environment.Jormungandr.Network
instance GHC.Generics.Generic Cardano.Environment.Jormungandr.Network
instance Data.Text.Class.FromText Cardano.Environment.Jormungandr.Network
instance Data.Text.Class.ToText Cardano.Environment.Jormungandr.Network


-- | The format is for the Shelley era as implemented by the Jörmungandr
--   node.
module Cardano.Wallet.Binary.Jormungandr
getBlockHeader :: Get BlockHeader
getBlock :: Get Block

-- | Messages are what the block body consists of.
--   
--   Every message is prefixed with a message header.
--   
--   Following, as closely as possible:
--   <a>https://github.com/input-output-hk/rust-cardano/blob/e0616f13bebd6b908320bddb1c1502dea0d3305a/chain-impl-mockchain/src/message/mod.rs#L22-L29</a>
data Message
Initial :: [ConfigParam] -> Message
OldUtxoDeclaration :: TODO -> Message
Transaction :: TODO -> Message
Certificate :: TODO -> Message
UpdateProposal :: SignedUpdateProposal -> Message
UpdateVote :: SignedVote -> Message
UnimplementedMessage :: Int -> Message
data Block
Block :: BlockHeader -> [Message] -> Block
data BlockHeader
BlockHeader :: Word16 -> Word32 -> SlotId -> Word32 -> Hash "content" -> Hash "parentHeader" -> BlockHeader
[version] :: BlockHeader -> Word16
[contentSize] :: BlockHeader -> Word32
[slot] :: BlockHeader -> SlotId
[chainLength] :: BlockHeader -> Word32
[contentHash] :: BlockHeader -> Hash "content"
[parentHeaderHash] :: BlockHeader -> Hash "parentHeader"
data ConfigParam
Block0Date :: Word64 -> ConfigParam
ConfigDiscrimination :: Discrimination -> ConfigParam
ConsensusVersion :: Word16 -> ConfigParam
SlotsPerEpoch :: Word32 -> ConfigParam
SlotDuration :: Word8 -> ConfigParam
EpochStabilityDepth :: Word32 -> ConfigParam
ConsensusGenesisPraosActiveSlotsCoeff :: Milli -> ConfigParam
MaxNumberOfTransactionsPerBlock :: Word32 -> ConfigParam
BftSlotsRatio :: Milli -> ConfigParam
AddBftLeader :: LeaderId -> ConfigParam
RemoveBftLeader :: LeaderId -> ConfigParam
AllowAccountCreation :: Bool -> ConfigParam
ConfigLinearFee :: LinearFee -> ConfigParam
ProposalExpiration :: Word32 -> ConfigParam
data Discrimination
Production :: Discrimination
Test :: Discrimination
newtype LeaderId
LeaderId :: ByteString -> LeaderId
data LinearFee
LinearFee :: Word64 -> Word64 -> Word64 -> LinearFee
newtype Milli
Milli :: Word64 -> Milli

-- | The simplest interface to run a <a>Get</a> decoder. If the decoder
--   runs into an error, calls <a>fail</a>, or runs out of input, it will
--   call <a>error</a>.
runGet :: () => Get a -> ByteString -> a
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.Block
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.Block
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.Message
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.Message
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.ConfigParam
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.ConfigParam
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.LinearFee
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.LinearFee
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.LeaderId
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.LeaderId
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.Milli
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.Milli
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.Discrimination
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.Discrimination
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.SignedVote
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.SignedVote
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.TODO
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.TODO
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.SignedUpdateProposal
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.SignedUpdateProposal
instance GHC.Classes.Eq Cardano.Wallet.Binary.Jormungandr.BlockHeader
instance GHC.Show.Show Cardano.Wallet.Binary.Jormungandr.BlockHeader


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.Compatibility.Jormungandr

-- | A type representing the Jormungandr as a network target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <a>TxId</a>
data Jormungandr
instance Cardano.Wallet.Primitive.Types.TxId Cardano.Wallet.Compatibility.Jormungandr.Jormungandr
instance Cardano.Wallet.Primitive.AddressDerivation.KeyToAddress Cardano.Wallet.Compatibility.Jormungandr.Jormungandr

module Cardano.Wallet.Transaction.Jormungandr

-- | Construct a <a>TransactionLayer</a> compatible with Shelley and
--   <tt>Jörmungandr</tt>
newTransactionLayer :: TransactionLayer
